# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17Ox5Knj3ZMvo9VDuUAAdiZ2jnFR9sGIf
"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

# Read the input image
# Ensure the image path is correct
try:
    img = Image.open('/content/pexels-oguz-kagan-cevik-247212801-13350258.jpg')
except FileNotFoundError:
    print("Error: Image file not found. Please check the path.")
    # Exit or handle the error appropriately
    exit()


# Convert image to grayscale
# Convert to numpy array to perform operations
img_gray = img.convert('L')
img_gray_np = np.array(img_gray)

# Resize the image to required size
img_resized = img_gray_np
if img_gray_np.shape != (512, 512):
    img_resized = np.array(img_gray.resize((512, 512)))

# Message to be embedded
message = 'geeksforgeeks'

# Length of the message where each character is 8 bits
len_message_bits = len(message) * 8

# Get all the ASCII values of the characters of the message
ascii_values = [ord(char) for char in message]

# Convert the decimal values to binary
bin_message = ''.join([bin(val)[2:].zfill(8) for val in ascii_values])

# Length of the binary message
N = len(bin_message)

# Initialize output as input
output_img_np = np.copy(img_resized)

# Get height and width for traversing through the image
height, width = img_resized.shape

# Counter for number of embedded bits
embed_counter = 0

# Traverse through the image
for i in range(height):
    for j in range(width):
        # If more bits are remaining to embed
        if embed_counter < N:
            # Get the current pixel value
            pixel_value = output_img_np[i, j]

            # Finding the Least Significant Bit of the current pixel
            LSB = pixel_value % 2

            # Get the bit from the message
            message_bit = int(bin_message[embed_counter])

            # Find whether the bit is same or needs to change
            temp = message_bit - LSB

            # Updating the output to input + temp
            output_img_np[i, j] = pixel_value + temp

            # Increment the embed counter
            embed_counter += 1
        else:
            break # Stop embedding if message is fully embedded
    if embed_counter == N:
        break # Stop embedding if message is fully embedded


# Convert the numpy array back to an image
output_img = Image.fromarray(output_img_np.astype(np.uint8), 'L')
original_img_pil = Image.fromarray(img_resized.astype(np.uint8), 'L')

# Write both the input and output images to local storage
original_img_pil.save('/content/originalImage.png')
output_img.save('/content/stegoImage.png')

# Display both images
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(original_img_pil, cmap='gray')
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(output_img, cmap='gray')
plt.title('Stego Image')
plt.axis('off')

plt.show()